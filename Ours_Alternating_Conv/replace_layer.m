function [net] = replace_layer(net, opts, f_h, f_w)
% -------------------------------------------------------------------------
%   Description:
%       Replace the reshape layer which is initialised base on the expected input width and height
%
%   Input:
%       - net  : the Spatial SR model
%       - opts : options
%       - f_h  : spatial height of the input LF
%	- f_w  : spatial width of the input LF
%
% -------------------------------------------------------------------------

    scale   = opts.scale;
    if( scale == 4)
        level = 2;
        f_h = f_h * scale / 2;
        f_w = f_w * scale / 2;
    else
        level = 1;
    end
    depth   = opts.depth;
    a       = opts.conv_a;

    for s = level : -1 : 1
        for d = 1:depth
            
            inputs  = { sprintf('level%d_relu%d', s, d) };
            outputs = { sprintf('level%d_reshape%d', s, d) };
            block = dagnn.Reshape('dims', sqrt(a), ...
                                       'sp2an', true, ...
                                       'h', f_h/s, ...
                                       'w', f_w/s);
            
            idxs = net.getLayerIndex(outputs);
            net.layers(idxs) = struct(...
                              'name', {outputs{1}}, ...
                              'inputs', {inputs}, ...
                              'outputs', {outputs}, ...
                              'params', {{}}, ...
                              'inputIndexes', {idxs}, ...
                              'outputIndexes', {idxs + 1}, ...
                              'paramIndexes', {[]}, ...
                              'forwardTime', {[]}, ...
                              'backwardTime', {[]}, ...
                            'block', {block}) ;
            net.layers(idxs).block.attach(net, idxs);

                 
            inputs  = { sprintf('level%d_relu_an%d', s, d) };
            outputs = { sprintf('level%d_reshape_an%d', s, d) };
            block = dagnn.Reshape('dims', sqrt(a), ...
                                       'sp2an', false, ...
                                       'h', f_h/s, ...
                                       'w', f_w/s);

            idxs = net.getLayerIndex(outputs);
            net.layers(idxs) = struct(...
                              'name', {outputs{1}}, ...
                              'inputs', {inputs}, ...
                              'outputs', {outputs}, ...
                              'params', {{}}, ...
                              'inputIndexes', {idxs}, ...
                              'outputIndexes', {idxs + 1}, ...
                              'paramIndexes', {[]}, ...
                              'forwardTime', {[]}, ...
                              'backwardTime', {[]}, ...
                            'block', {block}) ;
            net.layers(idxs).block.attach(net, idxs);
        end
    end
    
    net.rebuild();
    net.mode = 'test' ;

    output_var = 'level1_output';
    output_index = net.getVarIndex(output_var);
    net.vars(output_index).precious = 1;
